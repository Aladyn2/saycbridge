#!/usr/bin/env python
# Copyright (c) 2016 The SAYCBridge Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import sys
import find_src
import logging
import json
import argparse
import datetime

from z3b.bidder import Bidder
from core.board import Board
from core.call import Pass

log = logging.getLogger(__name__)

class CompileExplorer:
    def _bid_board(self, board, bidder):
        result = {}
        result['board'] = str(board.identifier)
        result['calls'] = []
        result['rules'] = []
        while not board.call_history.is_complete():
            position_to_call = board.call_history.position_to_call().index
            hand = board.deal.hands[position_to_call]
            selection = bidder.call_selection_for(hand, board.call_history)
            if not selection:
                log.warn("None Call for: %s" % board.identifier)
                call = Pass()
                rule = None
            else:
                call = selection.call
                rule = selection.rule
            board.call_history.calls.append(call)
            result['calls'].append(str(call))
            result['rules'].append(str(rule))
        return result

    def configure_logging(self, verbose):
        handler = logging.StreamHandler(sys.stderr)
        formatter = logging.Formatter("%(levelname)-8s: %(message)s")
        handler.setFormatter(formatter)

        logger = logging.getLogger()
        logger.addHandler(handler)
        if verbose:
            logger.setLevel(logging.NOTSET)

    def main(self, args):
        parser = argparse.ArgumentParser()
        parser.add_argument('output_path', type=str)
        parser.add_argument('count', type=int)
        parser.add_argument('--verbose', '-v')
        args = parser.parse_args()
        start = datetime.datetime.now()

        self.configure_logging(args.verbose)
        bidder = Bidder()
        results = []
        output_path = 'results.json'
        try:
            for _ in xrange(args.count):
                results.append(self._bid_board(Board.random(), bidder))
        except KeyboardInterrupt:
            print
            print "User Interrupted."

        with open(output_path, 'w') as results_file:
            json.dump(results, results_file, indent=1)
        end = datetime.datetime.now()
        duration = round((end - start).total_seconds(), 1)
        print "%s results written to %s in %ss" % (len(results), output_path, duration)

if __name__ == '__main__':
    CompileExplorer().main(sys.argv[1:])
