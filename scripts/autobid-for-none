#!/usr/bin/env python
# Copyright (c) 2013 The SAYCBridge Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import logging
import sys
import find_src

from core.call import Call, Pass
from core.board import Board
from core.suit import *
import z3b.bidder
import random


class AutobidForNone(object):
    def __init__(self):
        self.bidder = z3b.bidder.Bidder()
        self.interpreter = z3b.bidder.Interpreter()
        self.board_count = 0
        self.none_count = 0

    def _bid_board(self, board):
        self.board_count += 1
        # FIXME: Unclear if we should have to maintain our own History object.
        history = self.interpreter.create_history(board.call_history)
        while not history.call_history.is_complete():
            position_to_call = board.call_history.position_to_call()
            hand = board.deal.hand_for(position_to_call)
            selection = self.bidder.call_selection_for(hand, history.call_history)

            if selection is None or selection.call is None:
                self.none_count += 1

                print "z3b=%s with %s" % (None, board.deal.hand_for(position_to_call).pretty_one_line())
                vulnerability = history.call_history.vulnerability.name
                optional_vulernability_string = "" if vulnerability == "None" else ", '%s'" % vulnerability
                print "['%s', '?', '%s'%s],  # %s, %s" % (
                    hand.cdhs_dot_string(),
                    history.call_history.calls_string(),
                    optional_vulernability_string,
                    board.identifier.partition(":")[0], # remove the call history
                    position_to_call.char,
                )
                print
                return

            history = self.interpreter.extend_history_with_selection(history, selection)


    def configure_logging(self, is_verbose):
        handler = logging.StreamHandler(sys.stderr)
        formatter = logging.Formatter("%(levelname)-8s: %(message)s")
        handler.setFormatter(formatter)

        logger = logging.getLogger()
        logger.addHandler(handler)
        if is_verbose:
            logger.setLevel(logging.NOTSET)

    def main(self, args):
        self.configure_logging(True)

        if args:
            for identifier in args:
                self._bid_board(Board.from_identifier(identifier))
            return 0

        try:
            random_state = random.getstate()
            while True:
                random.setstate(random_state)
                board = Board.random()
                random_state = random.getstate()
                self._bid_board(board)
        except KeyboardInterrupt:
            print
            print "User interrupted."
            if self.board_count:
                none_percent = 100.0 * self.none_count / self.board_count
                print "%s of %s (%.1f%%) boards were None" % (self.none_count, self.board_count, none_percent)
            return 0


if __name__ == '__main__':
    random.seed(0)
    AutobidForNone().main(sys.argv[1:])
