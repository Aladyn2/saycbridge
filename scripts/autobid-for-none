#!/usr/bin/env python
# Copyright (c) 2013 The SAYCBridge Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import logging
import sys
import find_src

from core.call import Call, Pass
from core.board import Board
from core.suit import *
from core.position import *
import kbb
import z3b.bidder


class AutobidForNone(object):
    def __init__(self):
        self.z3b = z3b.bidder.Bidder()

    def _bid_board(self, board):
        while not board.call_history.is_complete():
            position_to_call = board.call_history.position_to_call()
            hand = board.deal.hands[position_to_call]
            bid = self.z3b.find_call_for(hand, board.call_history)

            if bid is None:
                print "z3b=%s with %s" % (None, board.deal.hands[position_to_call].pretty_one_line())
                vulnerability = board.call_history.vulnerability.name
                optional_vulernability_string = "" if vulnerability == "None" else ", '%s'" % vulnerability
                print "['%s', '%s'%s],  # %s, %s" % (
                    hand.pbn_string(),
                    board.call_history.calls_string(),
                    optional_vulernability_string,
                    board.identifier().partition(":")[0], # remove the call history
                    position_char(position_to_call),
                )
                print
                return

            board.call_history.calls.append(bid)

    def configure_logging(self, is_verbose):
        handler = logging.StreamHandler(sys.stderr)
        formatter = logging.Formatter("%(levelname)-8s: %(message)s")
        handler.setFormatter(formatter)

        logger = logging.getLogger()
        logger.addHandler(handler)
        if is_verbose:
            logger.setLevel(logging.NOTSET)

    def main(self, args):
        self.configure_logging(True)

        if args:
            for identifier in args:
                self._bid_board(Board.from_identifier(identifier))
            return 0

        try:
            while True:
                self._bid_board(Board.random())
        except KeyboardInterrupt:
            print
            print "User interrupted."
            return 0


if __name__ == '__main__':
    AutobidForNone().main(sys.argv[1:])
