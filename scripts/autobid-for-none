#!/usr/bin/env python
# Copyright (c) 2013 The SAYCBridge Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import sys
import find_src

from core.call import Call, Pass
from core.board import Board
from core.suit import *
import z3b.bidder
from tests.harness import expectation_line
from core.hand import Hand


# FIXME: This belongs on a Contract object or maybe call?
def _is_below_game(call):
    if not call:
        return True
    assert call.strain
    if call.strain == NOTRUMP:
        return call.level < 3
    if call.strain in MAJORS:
        return call.level < 4
    return call.level < 5


class AutobidForNone(object):
    def __init__(self):
        self.z3b = z3b.bidder.Bidder()
        self.interpreter = z3b.bidder.Interpreter()
        self.board_count = 0
        self.none_count = 0

    def _check_for_missed_game(self, board):
        points = map(Hand.high_card_points, board.deal.hands)
        pair_points = [points[0] + points[2], points[1] + points[3]]
        # If any group has 28+ hcp and contract is below game.
        someone_has_game = any(map(lambda hcp: hcp >= 28, pair_points))
        if someone_has_game and _is_below_game(board.call_history.last_contract()):
            print "MISSED GAME: %s\n" % board.identifier

    def _bid_board(self, board):
        self.board_count += 1
        while not board.call_history.is_complete():
            position = board.call_history.position_to_call()
            hand = board.deal.hand_for(position)
            call = self.z3b.find_call_for(hand, board.call_history)

            if call is None:
                self.none_count += 1

                print "%s partner last rule: %s" % (
                    board.deal.hand_for(position).pretty_one_line(),
                    self.interpreter.create_history(board.call_history).partner.rule_for_last_call,
                )
                unittest_comment = "  # %s, %s" % (
                    board.identifier.partition(":")[0], # remove the call history
                    position.char,
                )
                print expectation_line(hand, board.call_history) + unittest_comment
                print
                return

            board.call_history.calls.append(call)
        self._check_for_missed_game(board)

    def main(self, args):
        if args:
            for identifier in args:
                self._bid_board(Board.from_identifier(identifier))
            return 0

        try:
            while True:
                self._bid_board(Board.random())
        except KeyboardInterrupt:
            print
            print "User interrupted."
            if self.board_count:
                none_percent = 100.0 * self.none_count / self.board_count
                print "%s of %s (%.1f%%) boards were None" % (self.none_count, self.board_count, none_percent)
            return 0


if __name__ == '__main__':
    AutobidForNone().main(sys.argv[1:])
