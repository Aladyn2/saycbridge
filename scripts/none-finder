#!/usr/bin/env python
# Copyright (c) 2013 The SAYCBridge Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import operator
import sys
import find_src

from core.callhistory import CallHistory
from z3b.bidder import Interpreter, RuleSelector
from core.callexplorer import CallExplorer
from z3b import model as z3b_model
from z3b.prettymodel import pretty_print_model, hand_from_model
from tests.harness import expectation_line
import z3


def _print_usage_and_exit():
    print "USAGE: none-finder HISTORY"
    print " HISTORY is space or comma separated"
    print
    sys.exit(1)


class NoneFinder(object):
    def main(self):
        history_string = " ".join(sys.argv[1:])
        call_history = CallHistory.from_string(history_string)

        interpreter = Interpreter()
        history = interpreter.create_history(call_history)
        selector = RuleSelector(interpreter.system, history)

        constraints = []
        for call in CallExplorer().possible_calls_over(call_history):
            rule = selector.rule_for_call(call)
            if rule and not rule.requires_planning:
                constraints.append(selector.constraints_for_call(call))

        constraints_expr = z3.Not(z3.Or(*constraints))
        solver = z3.SolverFor('QF_LIA')
        solver.add(z3b_model.axioms)
        solver.add(constraints_expr)

        if solver.check() == z3.unsat:
            print "Calls found for all possible hands."
        else:
            pretty_print_model(solver.model())
            print expectation_line(hand_from_model(solver.model()), call_history), "# from none-finder"


if __name__ == '__main__':
    NoneFinder().main()
