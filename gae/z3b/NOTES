
# walk through all calls in the priority tree
# Add their constraint to an empty z3
# match your hand to that new empty z3
# if it matches, then add to your list and cut that branch
# if it does not match continue

# use a final tie-breaking priority to pick the bid from the list


Intrepretation:

# you have your existing knowledge
# Take the set of bids which have higher inter-bid priority than the bids your partner made
# take the negation of their constrait.  Add that knowledge to their hand.
# take the bid they did make, and add that knowledge to their hand.

OneOfASuit:
 preconditions:
  NotOpened
 call:
  IsSuit
  Level = 1
 constraint:
  rule_of_twenty


namespace Preconditions {
    
expr NotOpened = "some expr string";

}

struct Rule {
    Vector<Preconditions> preconditions;
    Call call;
    Constraint constraint;
};


class DefaultPass {
    
};


void F()
{
    Rule oneOfASuit = { [ NotOpened() ], IsSuit(),  }
}


class OneOfASuitOpening : public Rule {
    OneOfASuitOpening()
    {
    }

    expr constraint() {

    }
}

typdef Map<Call, Interpretation> AName;




AName OneOfASuitOpening(CallHistory history)
{
    if (history.lastNonPass())
        return;

}
